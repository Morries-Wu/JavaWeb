常用的事件:
onload加载完成事件            加载完成之后,常用于页面JavaScript代码初始化工作
obclick单击事件              常用于按钮的点击响应操作
onblur失去焦点事件            常用于输入框失去焦点后验证其输入内容是否合法
onchange内容发生改变事件       常用于下拉列表和输入框内容发生改变后的操作
onsubmit表单提交事件          常用于表单提交前,验证所有表单项是否合法

事件的注册分静态注册和动态注册两种
什么是事件的注册和绑定
其实就是告诉浏览器,当事件响应后要执行哪些操作代码,叫事件注册或事件绑定

静态注册事件:通过html标签的事件属性直接赋值事件响应后的代码,这种方式我们叫做静态注册
动态注册事件:是指先通过js代码得到标签的dom对象
然后再通过对象.事件名=function(){}这种形式赋予事件响应后的代码,叫做动态注册
动态注册基本步骤:
        1、获取标签对象
        2、标签对象.事件名=function(){}


jQuery属性操作
html()      它可以设置和获取起始标签和结束标签中的内容,跟dom属性innerHTML一样
text()      它可以设置和获取起始标签和结束标签中的文本,跟dom属性innerText一样
val()       它可以设置和获取表单项的value值,跟dom属性value一样
attr()      可以设置和获取属性值
prop()      可以设置和获取属性值



jsp九大内置对象
jsp中的内置对象,是指tomcat在翻译jsp页面成为Servlet源代码后,内部提供的九大对象,叫内置对象
request         请求对象
response        响应对象
pageContext     jsp的上下文对象
session         会话对象
application     ServletContext对象
config          ServletConfig对象
out             jsp输出流对象
page            指向当前jsp的对象

jsp四大域对象
pageContext     PageContextImpl类            当前jsp页面范围有效
request         HttpServletRequest类         一次请求内有效
session         HttpSession                  一个会话范围内有效(打开浏览器访问服务器,知道关闭服务器)
application     ServletContext类             整个web工程范围内都有效(只要web工程不停止,数据都在)


out缓冲区和response缓冲区区别
当jsp页面中所有代码执行完成后会做以下两个操作:
1、执行out.flush()操作,会把out缓冲区中的数据追加写入到response缓冲区末尾
2、会执行response的刷新操作,把全部数据写给客户端
由于jsp翻译后,底层源代码都是使用out来进行输出,所以一般情况下,我们在jsp页面中统一使用out来进行输出
避免打乱页面输出内容的顺序

Listener监听器
监听器的作用是,监听某种事务的变化,然后通过回调函数,反馈给客户(程序)去做一些相应的处理
ServletContextListener它可以监听ServletContext对象的创建和销毁
ServletContex对象在web工程启动的时候创建,在web工程停止的时候销毁


EL表达式的11个隐含对象,是EL表达式中自己定义的,可以直接使用
     变量                     类型                          作用
pageContext             PageContexImpl          它可以获取jsp中的九大内置对象
pageScope               Map<String,Object>      它可以获取pageContext域中的数据
requestScope            Map<String,Object>      它可以获取Request域中的数据
sessionScope            Map<String,Object>      它可以获取session域中的数据
applicationScope        Map<String,Object>      它可以获取SevletContext域中的数据
param                   Map<String,String>      它可以获取参数的值
paramsValues            Map<String,String[]>    它可以获取请求参数的值,获取多个值的时候使用
header                  Map<String,String>      它可以获取请求头的信息
headerValues            Map<String,String[]>    它可以获取请求头的信息,可以获取多个值的状况
cookie                  Map<String,Cookie>      它可以获取当前请求的cookie信息
initParam               Map<String,String>      它可以获取在web.xml中配置的<context-param>上下文参数

文件的上传和下载
1、要有一个form标签,method=post请求
2、form标签的encType属性值必须为multipart/form-data值
3、在form标签中使用input type=file添加上传的文件
4、编写服务器代码(Servlert程序)接收,处理上传的数据
encType=multipart/form-data 表示提交的数据
以多段(每一个表单项一个数据段)的形式进行拼接,然后以二进制流的形式发送给服务器



Cookie的原理
客户端有了某个网站的Cookie后,每次请求都会发送给对应服务器

客戶端还没有Cookie,
1、在服务器内部创建Cookie对象 Cookie cookie=new Cookie("key","value");
2、通知客户端保存Cookie     respones.addCookie(cookie);
3、通过响应头Set-Cookie通知客户端保存Cookie  Set-Cookie:key=value
   收到响应后,发现有Set-Cookie响应头,就去看一下,没有这个Cookie,就创建,有就修改

服务器获取客户端的Cookie只需要一行代码:req.getCookies():Cookie[]

Cookie的path属性可以有效的过滤哪些Cookie可以发送给服务器,哪些不发
path属性是通过请求的地址来进行有效过滤的
CookieA path=/工程路径
CookieB path=/工程路径/abc
请求地址如下:
http://ip:port/工程路径/a.html
CookieA 发送
CookieB 不发送
Cookie信息保存在客户端,Session会话是保存在服务器端

Session会话
session就是一个接口(HttpSession)
session就是会话,用来维护一个客户端和服务器之间关联的一种技术
每个客户端都有自己的一个session会话
Session会话中,我们经常用来保存用户登录之后的信息
第一次调用时:创建Session会话
之后调用都是:获取前面创建好的Session会话对象


Session的超時指的是,客戶端兩次請求的最大間隔時長
Session默认的超时时长是30分钟,因为在tomcat服务器的配置文件web.xml中默认配置
它就是标识配置了当前的tomcat服务器下所有session超时配置默认时长为:30分钟
  <session-config>
    <session-timeout>30</session-timeout>
  </session-config>

服务器每次创建Session会话的时候,都会创建一个Cookie对象
这个Cookie对象的key永远是JSESSIONID
值是新创建出来的Session的id值

FilterConfig类的作用是获取filter过滤器的配置内容
    1、获取filter的名称 filter-name的内容
    2、获取在Filter中配置的init-param初始化参数
    3、获取ServletContext对象
多个Filter过滤器执行的时候,它们执行的优先顺序是由
它们在web.xml中从上到下配置的顺序决定的
    1、所有的Filter和目标资源默认都执行在同一个线程中
    2、多个Filter共同执行的时候,它们都使用同一个Request对象

JSON定义
JSON是由键值对组成,并且由花括号包围,每个键由引号引起来,键和值之间使用冒号进行分隔
多组键值对之间进行逗号分隔
json中的key访问就跟访问对象的属性一样,json对象.key

json的存在形式
一种是:对象的形式存在,我们叫它json对象
一种是:字符串的形式存在,我们叫它json字符串
JSON.stringfy()     把json对象转换成json字符串
JSON.parse()        把json字符串转换为JSON对象
一般我们要操作json中数据的时候,需要json对象的格式
一般我们要在客户端和服务器之间进行数据交换的时候,使用json字符串


AJAX是一种浏览器通过js异步发起请求,局部更新页面的技术
如需获取来自服务器的响应,请使用XMLHttpRequest对象的responseText
responseText        获得字符串形式的响应数据
AJAX请求的局部更新,浏览器地址栏不会发生变化
局部更新不会舍弃原来页面的内容

1、创建对象
2、请求
3、响应
4、readyState


jQuery中的Ajax请求
$.ajax方法
url         表示请求地址
type        表示请求的类型GET或POST请求
data        发送的给服务器的请求
格式有两种:
一、name=value&&name=value
二、{key:value}
success     请求成功,响应的回调函数
datatype    服务器返回客户端的数据     常用的数据类型有:text、xml、json


$.get方法和$.post方法使用一致
url         请求的url地址
data        发送的给服务器的请求
callback    成功的回调函数
type        返回的数据类型

$.getJSON方法
url         请求的url地址
data        发送的给服务器的请求
callback    成功的回调函数

表单序列化serialize()
serialize()可以把表单中所有表单项的内容都获取到,并以name=value&name=value的形式拼接


SSM